"""
리스트 : 데이터를 연속적으로 담아 처리하기 위해 사용되는 자료형 (배열과 같음)

리스트 초기화 : list() 또는 [] 사용 

인덱스(index) 값을 넣어서 원소에 접근 가능
인덱스는 0부터 시작 

"""

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)  # [1, 2, 3, 4, 5, 6, 7, 8, 9]

print(a[4])  #5 #5번째 원소 출력

# 리스트 초기화
n = 10
a = [0] * n  # 크기가 n이고 모든 값이 0인 1차원 리스트 초기화
print(a)  # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

a = list(0 for _ in range(10))
print(a)  # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"""
리스트 인덱싱과 슬라이싱 

인덱싱 : 인덱스 값을 입력하여 리스트의 특정한 원소에 접근하는 것 
(양의정수와 음의 정수 사용 가능)

슬라이싱 : 연속적인 위치를 갖는 원소들을 가져와야 할 때 사용
(끝 인덱스는 실제 인덱스보다 1을 더 크게 설정)
"""

# 인덱싱
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

print(a[-1])  # 9  #마지막 원소 출력

print(a[-3])  # 7  #뒤에서 3번째 원소 출력

a[3] = 7  # 4번째 원소 값을 7로 변경
print(a)  # [1, 2, 3, 7, 5, 6, 7, 8, 9]

# 슬라이싱
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a[1:4])  # [2, 3, 4]  #두 번째 원소부터 네 번째 원소까지
"""
리스트 컴프리헨션 : 리스트 안에 조건문/반복문을 넣어서 초기화 함 
"""

# 반복문
a = [i for i in range(10)]  #range(10) : 0부터 9까지
print(a)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

a = [i * i for i in range(1, 10)]  # range(1, 10) : 1부터 9까지
print(a)  # [1, 4, 9, 16, 25, 36, 49, 64, 81]

# 조건문
a = [i for i in range(10) if i % 2 == 1]  # 0부터 9까지의 수 중에서 홀수만 포함
print(a)  # [1, 3, 5, 7, 9]



"""
리스트 컴프리헨션은 2차원 리스트 초기화에 효과적으로 사용됨 
"""
n=10
m=3

a = [ [0] * m for _ in range(n)]  # 크기가 n*m 인 2차원 리스트 (10*3)
print(a)

b = [[0]*m]*n
print(b)


a[1][1] = 5 # 1행 1열에 5 대입
print(a)  # 1행 1열 값만 5로 바뀜 

b[1][1] = 5 # 1행 1열에 5 대입
print(b)  # 1행에 있는 값이 모두 5로 바뀜



"""
리스트 관련 기타 메서드
append() : 리스트에 원소를 하나 삽입
sort() : 기본 정렬 기능 (오름차순)
reverse() : 리스트의 원소의 순서를 모두 뒤집음
insert() : 특정한 인덱스 위치에 원소를 삽입
count() : 리스트에서 특정한 값을 가지는 데이터의 개수를 셈
remove() : 특정한 값을 갖는 원소를 제거 (여러 개면 하나만 제거)
"""


a = [1, 4, 2]

# 리스트에 원소 삽입
a.append(3)
print(a) # [1, 4, 2, 3]

# 오름차순 정렬 
a.sort()
print(a) # [1, 2, 3, 4]

# 내림차순 정렬
a.sort(reverse=True)
print(a) # [4, 3, 2, 1]


a = [2,5,3,1]

# 리스트 원소 뒤집기 
a.reverse()
print(a)  # [1, 3, 5, 2]

# 특정 인덱스에 데이터 추가 
a.insert(2, 3)
print(a)  # [1, 3, 3, 5, 2]

# 특정 값인 데이터 개수 세기 
print(a.count(3))  # 2

# 특정값 데이터 삭제 
a.remove(3)
print(a) # [1, 3, 5, 2] (원소가 여러개일때 앞에 있는 하나만 삭제)


# 리스트에서 특정 값을 갖는 원소 모두 제거 
a = [1,2,3,4,5,5,5]
remove_set = {3,5}
result = [ i for i in a if i not in remove_set]
print(result)
